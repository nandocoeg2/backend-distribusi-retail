generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  username  String   @unique
  password  String
  firstName String?
  lastName  String?
  roleId    String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  profile   Profile?
  role      Role     @relation(fields: [roleId], references: [id])

  @@map("users")
}

model Profile {
  id     String  @id @default(cuid())
  userId String  @unique
  avatar String?
  bio    String?
  phone  String?
  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("profiles")
}

model Role {
  id          String     @id @default(cuid())
  name        String     @unique
  description String?
  menus       RoleMenu[]
  users       User[]

  @@map("roles")
}

model Menu {
  id       String     @id @default(cuid())
  name     String     @unique
  url      String
  icon     String?
  parentId String?
  order    Int?
  parent   Menu?      @relation("SubMenu", fields: [parentId], references: [id])
  children Menu[]     @relation("SubMenu")
  roles    RoleMenu[]

  @@map("menus")
}

model RoleMenu {
  roleId String
  menuId String
  menu   Menu   @relation(fields: [menuId], references: [id])
  role   Role   @relation(fields: [roleId], references: [id])

  @@id([roleId, menuId])
  @@map("role_menus")
}

model Customer {
  id             String          @id @default(cuid())
  name           String
  description    String?
  address        String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  email          String?         @unique
  phoneNumber    String
  purchaseOrders PurchaseOrder[]

  @@map("customers")
}

model Supplier {
  id             String          @id @default(cuid())
  name           String
  description    String?
  address        String?
  phoneNumber    String
  email          String?         @unique
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  bank           Json?
  code           String?         @unique
  purchaseOrders PurchaseOrder[]

  @@map("suppliers")
}

model PurchaseOrder {
  id                   String                @id @default(cuid())
  suratJalan           String?
  invoicePengiriman    String?
  suratPO              String?
  suratPenagihan       String?
  customerId           String
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  po_number            String
  statusId             String?
  tanggal_order        DateTime?
  total_items          Int?
  supplierId           String?
  po_type              POType                @default(SINGLE)
  files                FileUploaded[]
  purchaseOrderDetails PurchaseOrderDetail[]
  packings             Packing[]
  customer             Customer              @relation(fields: [customerId], references: [id])
  status               Status?               @relation(fields: [statusId], references: [id])
  supplier             Supplier?             @relation(fields: [supplierId], references: [id])

  @@map("purchase_orders")
}

model FileUploaded {
  id              String         @id @default(cuid())
  filename        String
  path            String
  mimetype        String
  size            Int
  purchaseOrderId String?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  statusId        String?
  purchaseOrder   PurchaseOrder? @relation(fields: [purchaseOrderId], references: [id], onDelete: Cascade)
  status          Status?        @relation(fields: [statusId], references: [id])

  @@map("file_uploaded")
}

model Status {
  id                 String          @id @default(cuid())
  status_code        String          @unique
  status_name        String
  status_description String?
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
  fileUploads        FileUploaded[]
  purchaseOrders     PurchaseOrder[]
  packings           Packing[]

  @@map("statuses")
}

model Inventory {
  id                   String                @id @default(cuid())
  kode_barang          String                @unique
  nama_barang          String
  stok_barang          Int
  harga_barang         Float
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  min_stok             Int                   @default(10)
  notifications        Notification[]
  purchaseOrderDetails PurchaseOrderDetail[]
  packingItems         PackingItem[]

  @@map("inventories")
}

model Notification {
  id          String           @id @default(cuid())
  title       String
  message     String
  type        NotificationType @default(GENERAL)
  isRead      Boolean          @default(false)
  inventoryId String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  inventory   Inventory?       @relation(fields: [inventoryId], references: [id])

  @@map("notifications")
}

model PurchaseOrderDetail {
  id                     String        @id @default(cuid())
  kode_barang            String
  nama_barang            String
  quantity               Int
  isi                    Int
  harga                  Float
  potongan_a             Float?
  harga_after_potongan_a Float?
  harga_netto            Float
  total_pembelian        Float
  potongan_b             Float?
  harga_after_potongan_b Float?
  purchaseOrderId        String
  inventoryId            String
  createdAt              DateTime      @default(now())
  updatedAt              DateTime      @updatedAt
  inventory              Inventory     @relation(fields: [inventoryId], references: [id])
  purchaseOrder          PurchaseOrder @relation(fields: [purchaseOrderId], references: [id], onDelete: Cascade)

  @@map("purchase_order_details")
}

enum POType {
  SINGLE
  BULK
}

enum NotificationType {
  GENERAL
  LOW_STOCK
  OUT_OF_STOCK
  STOCK_ALERT
  SYSTEM
}

model Packing {
  id              String        @id @default(cuid())
  tanggal_packing DateTime
  statusId        String
  purchaseOrderId String        @unique
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  updatedBy       String
  purchaseOrder   PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  status          Status        @relation(fields: [statusId], references: [id])
  packingItems    PackingItem[]

  @@map("packings")
}

model PackingItem {
  id             String      @id @default(cuid())
  nama_barang    String
  total_qty      Int
  jumlah_carton  Int
  isi_per_carton Int
  no_box         String
  packingId      String
  inventoryId    String
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  packing        Packing     @relation(fields: [packingId], references: [id], onDelete: Cascade)
  inventory      Inventory   @relation(fields: [inventoryId], references: [id])

  @@map("packing_items")
}
