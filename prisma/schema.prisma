generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(cuid())
  email         String         @unique
  username      String         @unique
  password      String
  firstName     String?
  lastName      String?
  roleId        String
  isActive      Boolean        @default(true)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  profile       Profile?
  role          Role           @relation(fields: [roleId], references: [id])
  auditTrails   AuditTrail[]
  uploadedFiles FileUploaded[]

  @@map("users")
}

model Profile {
  id     String  @id @default(cuid())
  userId String  @unique
  avatar String?
  bio    String?
  phone  String?
  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("profiles")
}

model Role {
  id          String     @id @default(cuid())
  name        String     @unique
  description String?
  menus       RoleMenu[]
  users       User[]

  @@map("roles")
}

model Menu {
  id       String     @id @default(cuid())
  name     String     @unique
  url      String
  icon     String?
  parentId String?
  order    Int?
  parent   Menu?      @relation("SubMenu", fields: [parentId], references: [id])
  children Menu[]     @relation("SubMenu")
  roles    RoleMenu[]

  @@map("menus")
}

model RoleMenu {
  roleId String
  menuId String
  menu   Menu   @relation(fields: [menuId], references: [id])
  role   Role   @relation(fields: [roleId], references: [id])

  @@id([roleId, menuId])
  @@map("role_menus")
}

model Customer {
  id                      String                    @id @default(cuid())
  namaCustomer            String
  kodeCustomer            String                    @unique
  groupCustomerId         String
  NPWP                    String?
  alamatNPWP              String?
  regionId                String
  alamatPengiriman        String
  description             String?
  createdAt               DateTime                  @default(now())
  updatedAt               DateTime                  @updatedAt
  createdBy               String
  updatedBy               String
  email                   String?                   @unique
  phoneNumber             String
  purchaseOrders          PurchaseOrder[]
  groupCustomer           GroupCustomer             @relation(fields: [groupCustomerId], references: [id])
  region                  Region                    @relation(fields: [regionId], references: [id])
  itemPrices              ItemPrice[]
  laporanPenerimaanBarang LaporanPenerimaanBarang[]

  @@map("customers")
}

model Supplier {
  id             String          @id @default(cuid())
  name           String
  description    String?
  address        String?
  phoneNumber    String
  email          String?         @unique
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  createdBy      String
  updatedBy      String
  bank           Json?
  code           String?         @unique
  purchaseOrders PurchaseOrder[]

  @@map("suppliers")
}

model PurchaseOrder {
  id                      String                    @id @default(cuid())
  customerId              String
  createdAt               DateTime                  @default(now())
  updatedAt               DateTime                  @updatedAt
  createdBy               String
  updatedBy               String
  po_number               String
  statusId                String?
  tanggal_masuk_po        DateTime?
  tanggal_batas_kirim     DateTime?
  termin_bayar            String?
  total_items             Int?
  supplierId              String?
  po_type                 POType                    @default(SINGLE)
  files                   FileUploaded[]
  purchaseOrderDetails    PurchaseOrderDetail[]
  packings                Packing[]
  invoices                InvoicePengiriman[]
  invoicePenagihan        InvoicePenagihan[]
  customer                Customer                  @relation(fields: [customerId], references: [id])
  status                  Status?                   @relation(fields: [statusId], references: [id])
  supplier                Supplier?                 @relation(fields: [supplierId], references: [id])
  laporanPenerimaanBarang LaporanPenerimaanBarang[]

  @@map("purchase_orders")
}

model FileUploaded {
  id              String         @id @default(cuid())
  filename        String
  path            String
  mimetype        String
  size            Int
  purchaseOrderId           String?
  laporanPenerimaanBarangId String? @map("laporan_penerimaan_barang_id")
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  createdBy       String?
  statusId        String?
  purchaseOrder           PurchaseOrder?           @relation(fields: [purchaseOrderId], references: [id], onDelete: Cascade)
  status                  Status?                  @relation(fields: [statusId], references: [id])
  user                    User?                    @relation(fields: [createdBy], references: [id])
  laporanPenerimaanBarang LaporanPenerimaanBarang? @relation(fields: [laporanPenerimaanBarangId], references: [id], onDelete: SetNull)

  @@map("file_uploaded")
}

model Status {
  id                      String              @id @default(cuid())
  status_code             String
  category                String
  status_name             String
  status_description      String?
  createdAt               DateTime            @default(now())
  updatedAt               DateTime            @updatedAt
  fileUploads             FileUploaded[]
  purchaseOrders          PurchaseOrder[]
  packings                Packing[]
  historyPengiriman       HistoryPengiriman[]
  invoiceStatusPembayaran InvoicePengiriman[]           @relation("InvoiceStatusPembayaran")
  suratJalanStatus        SuratJalan[]        @relation("SuratJalanStatus")
  packingItemStatus       PackingItem[]       @relation("PackingItemStatus")
  laporanPenerimaanBarang LaporanPenerimaanBarang[]
  invoicePenagihanStatus  InvoicePenagihan[]  @relation("InvoicePenagihanStatus")

  @@unique([status_code, category])
  @@map("statuses")
}

model Inventory {
  id                   String                @id @default(cuid())
  plu                  String                @unique
  nama_barang          String
  stok_c               Int                   @default(0)
  stok_q               Int                   @default(0)
  harga_barang         Float
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  createdBy            String
  updatedBy            String
  min_stok             Int                   @default(10)
  notifications        Notification[]
  purchaseOrderDetails PurchaseOrderDetail[]
  packingItems         PackingItem[]
  itemPrices           ItemPrice[]
  dimensiKardus        DimensiKardus?

  @@map("inventories")
}

model Notification {
  id          String           @id @default(cuid())
  title       String
  message     String
  type        NotificationType @default(GENERAL)
  isRead      Boolean          @default(false)
  inventoryId String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  inventory   Inventory?       @relation(fields: [inventoryId], references: [id])

  @@map("notifications")
}

model PurchaseOrderDetail {
  id                     String        @id @default(cuid())
  plu                    String
  nama_barang            String
  quantity               Int
  isi                    Int
  harga                  Float
  potongan_a             Float?
  harga_after_potongan_a Float?
  harga_netto            Float
  total_pembelian        Float
  potongan_b             Float?
  harga_after_potongan_b Float?
  purchaseOrderId        String
  inventoryId            String
  createdAt              DateTime      @default(now())
  updatedAt              DateTime      @updatedAt
  createdBy              String
  updatedBy              String
  inventory              Inventory     @relation(fields: [inventoryId], references: [id])
  purchaseOrder          PurchaseOrder @relation(fields: [purchaseOrderId], references: [id], onDelete: Cascade)

  @@map("purchase_order_details")
}

enum POType {
  SINGLE
  BULK
}

enum NotificationType {
  GENERAL
  LOW_STOCK
  OUT_OF_STOCK
  STOCK_ALERT
  PRICE_DIFFERENCE
  SYSTEM
}

enum InvoiceType {
  PEMBAYARAN
  PENGIRIMAN
}

model Packing {
  id              String        @id @default(cuid())
  packing_number  String        @unique
  tanggal_packing DateTime
  statusId        String
  purchaseOrderId String        @unique
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  createdBy       String
  updatedBy       String
  purchaseOrder   PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  status          Status        @relation(fields: [statusId], references: [id])
  packingItems    PackingItem[]

  @@map("packings")
}

model PackingItem {
  id             String    @id @default(cuid())
  nama_barang    String
  total_qty      Int
  jumlah_carton  Int
  isi_per_carton Int
  no_box         String
  packingId      String
  inventoryId    String
  statusId       String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  createdBy      String
  updatedBy      String
  packing        Packing   @relation(fields: [packingId], references: [id], onDelete: Cascade)
  inventory      Inventory @relation(fields: [inventoryId], references: [id])
  status         Status?   @relation("PackingItemStatus", fields: [statusId], references: [id])

  @@map("packing_items")
}

model InvoicePengiriman {
  id                 String          @id @default(cuid())
  no_invoice         String          @unique
  tanggal            DateTime        @default(now())
  deliver_to         String
  sub_total          Decimal         @db.Decimal(15, 2)
  total_discount     Decimal         @db.Decimal(15, 2)
  total_price        Decimal         @db.Decimal(15, 2)
  ppn_percentage     Decimal         @db.Decimal(5, 2)
  ppn_rupiah         Decimal         @db.Decimal(15, 2)
  grand_total        Decimal         @db.Decimal(15, 2)
  expired_date       DateTime?
  TOP                String?         @db.VarChar(50)
  type               InvoiceType     @default(PEMBAYARAN)
  statusPembayaranId String?
  statusPembayaran   Status?         @relation(name: "InvoiceStatusPembayaran", fields: [statusPembayaranId], references: [id])
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
  createdBy          String
  updatedBy          String
  purchaseOrderId    String?
  purchaseOrder      PurchaseOrder?  @relation(fields: [purchaseOrderId], references: [id])
  invoiceDetails     InvoicePengirimanDetail[]
  suratJalan         SuratJalan[]

  @@map("invoice")
}

model InvoicePengirimanDetail {
  id                  String   @id @default(cuid())
  invoiceId           String
  nama_barang         String
  PLU                 String   @db.VarChar(50)
  quantity            Int
  satuan              String   @db.VarChar(50)
  harga               Decimal  @db.Decimal(15, 2)
  total               Decimal  @db.Decimal(15, 2)
  discount_percentage Decimal  @db.Decimal(5, 2)
  discount_rupiah     Decimal  @db.Decimal(15, 2)
  PPN_pecentage       Decimal  @db.Decimal(5, 2)
  ppn_rupiah          Decimal  @db.Decimal(15, 2)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  createdBy           String
  updatedBy           String
  invoice             InvoicePengiriman  @relation(fields: [invoiceId], references: [id])

  @@map("invoice_detail")
}

model SuratJalan {
  id                String              @id @default(cuid())
  no_surat_jalan    String              @unique
  deliver_to        String
  PIC               String
  alamat_tujuan     String              @db.Text
  is_printed        Boolean             @default(false)
  print_counter     Int                 @default(0)
  invoiceId         String?
  statusId          String?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  createdBy         String
  updatedBy         String
  invoice           InvoicePengiriman?            @relation(fields: [invoiceId], references: [id])
  status            Status?             @relation("SuratJalanStatus", fields: [statusId], references: [id])
  suratJalanDetails SuratJalanDetail[]
  historyPengiriman HistoryPengiriman[]

  @@map("surat_jalan")
}

model SuratJalanDetail {
  id                    String                 @id @default(cuid())
  surat_jalan_id        String
  no_box                String                 @db.VarChar(50)
  total_quantity_in_box Int
  isi_box               Int
  sisa                  Int
  total_box             Int
  suratJalan            SuratJalan             @relation(fields: [surat_jalan_id], references: [id])
  suratJalanDetailItems SuratJalanDetailItem[]

  @@map("surat_jalan_details")
}

model SuratJalanDetailItem {
  id                    String           @id @default(cuid())
  surat_jalan_detail_id String
  nama_barang           String
  PLU                   String           @db.VarChar(50)
  quantity              Int
  satuan                String           @db.VarChar(50)
  total_box             Int
  keterangan            String?          @db.Text
  createdAt             DateTime         @default(now())
  updatedAt             DateTime         @updatedAt
  createdBy             String
  updatedBy             String
  suratJalanDetail      SuratJalanDetail @relation(fields: [surat_jalan_detail_id], references: [id])

  @@map("surat_jalan_detail_items")
}

model HistoryPengiriman {
  id             String     @id @default(cuid())
  surat_jalan_id String
  status_id      String
  tanggal_kirim  DateTime   @default(now())
  keterangan     String?    @db.Text
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  createdBy      String
  updatedBy      String
  suratJalan     SuratJalan @relation(fields: [surat_jalan_id], references: [id])
  status         Status     @relation(fields: [status_id], references: [id])

  @@map("history_pengiriman")
}

enum ActionType {
  CREATE
  UPDATE
  DELETE
}

model AuditTrail {
  id        String     @id @default(cuid())
  tableName String
  recordId  String
  action    ActionType
  timestamp DateTime   @default(now())
  userId    String
  details   Json
  user      User       @relation(fields: [userId], references: [id])

  @@map("audit_trails")
}

model Region {
  id          String     @id @default(cuid())
  kode_region String     @unique
  nama_region String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  createdBy   String
  updatedBy   String
  customers   Customer[]

  @@map("regions")
}

model TermOfPayment {
  id                      String                    @id @default(cuid())
  kode_top                String                    @unique
  batas_hari              Int
  createdAt               DateTime                  @default(now())
  updatedAt               DateTime                  @updatedAt
  createdBy               String
  updatedBy               String
  laporanPenerimaanBarang LaporanPenerimaanBarang[]
  invoicePenagihan        InvoicePenagihan[]

  @@map("term_of_payment")
}

model LaporanPenerimaanBarang {
  id              String         @id @default(cuid())
  purchaseOrderId String?        @map("purchase_order_id")
  tanggal_po      DateTime?
  customerId      String?        @map("customer_id")
  termin_bayar    String?        @map("termin_bayar")
  statusId        String?        @map("status_id")
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  createdBy       String
  updatedBy       String
  purchaseOrder   PurchaseOrder? @relation(fields: [purchaseOrderId], references: [id])
  customer        Customer?      @relation(fields: [customerId], references: [id])
  termOfPayment   TermOfPayment? @relation(fields: [termin_bayar], references: [id])
  status          Status?        @relation(fields: [statusId], references: [id])
  files           FileUploaded[]

  @@map("laporan_penerimaan_barang")
}

model Company {
  id                String   @id @default(cuid())
  kode_company      String   @unique
  nama_perusahaan   String
  alamat            String?
  no_rekening       String?
  bank              String?
  bank_account_name String?
  bank_cabang       String?
  telp              String?
  fax               String?
  email             String?  @unique
  direktur_utama    String?
  npwp              String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  createdBy         String
  updatedBy         String

  @@map("companies")
}

model GroupCustomer {
  id         String     @id @default(cuid())
  kode_group String     @unique
  nama_group String
  alamat     String?
  npwp       String?
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  createdBy  String
  updatedBy  String
  customers  Customer[]

  @@map("group_customer")
}

model ItemPrice {
  id          String    @id @default(cuid())
  inventoryId String
  customerId  String
  harga       Float
  pot1        Float?
  harga1      Float?
  pot2        Float?
  harga2      Float?
  ppn         Float?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  createdBy   String
  updatedBy   String
  inventory   Inventory @relation(fields: [inventoryId], references: [id])
  customer    Customer  @relation(fields: [customerId], references: [id])

  @@map("item_prices")
}

model InvoicePenagihan {
  id                    String                     @id @default(cuid())
  purchaseOrderId       String
  no_invoice_penagihan  String                     @unique
  kw                    Boolean                    @default(false)
  fp                    Boolean                    @default(false)
  tanggal               DateTime                   @default(now())
  kepada                String
  sub_total             Decimal                    @db.Decimal(15, 2)
  total_discount        Decimal                    @db.Decimal(15, 2)
  total_price           Decimal                    @db.Decimal(15, 2)
  ppn_percentage        Decimal                    @db.Decimal(5, 2)
  ppn_rupiah            Decimal                    @db.Decimal(15, 2)
  grand_total           Decimal                    @db.Decimal(15, 2)
  termOfPaymentId       String
  statusId              String
  createdAt             DateTime                   @default(now())
  updatedAt             DateTime                   @updatedAt
  createdBy             String
  updatedBy             String
  purchaseOrder         PurchaseOrder              @relation(fields: [purchaseOrderId], references: [id])
  termOfPayment         TermOfPayment              @relation(fields: [termOfPaymentId], references: [id])
  status                Status                     @relation("InvoicePenagihanStatus", fields: [statusId], references: [id])
  invoicePenagihanDetails InvoicePenagihanDetail[]

  @@map("invoice_penagihan")
}

model InvoicePenagihanDetail {
  id                     String            @id @default(cuid())
  invoicePenagihanId     String
  nama_barang            String
  PLU                    String            @db.VarChar(50)
  quantity               Int
  satuan                 String            @db.VarChar(50)
  harga                  Decimal           @db.Decimal(15, 2)
  total                  Decimal           @db.Decimal(15, 2)
  discount_percentage    Decimal           @db.Decimal(5, 2)
  discount_rupiah        Decimal           @db.Decimal(15, 2)
  createdAt              DateTime          @default(now())
  updatedAt              DateTime          @updatedAt
  createdBy              String
  updatedBy              String
  invoicePenagihan       InvoicePenagihan  @relation(fields: [invoicePenagihanId], references: [id], onDelete: Cascade)

  @@map("invoice_penagihan_detail")
}

model DimensiKardus {
  id          String    @id @default(cuid())
  inventoryId String    @unique
  berat       Float
  panjang     Float
  lebar       Float
  tinggi      Float
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  createdBy   String
  updatedBy   String
  inventory   Inventory @relation(fields: [inventoryId], references: [id])

  @@map("dimensi_kardus")
}