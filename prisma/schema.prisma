generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  username  String   @unique
  password  String
  firstName String?
  lastName  String?
  roleId    String
  role      Role     @relation(fields: [roleId], references: [id])
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  profile  Profile?

  @@map("users")
}

model Profile {
  id     String  @id @default(cuid())
  userId String  @unique
  avatar String?
  bio    String?
  phone  String?

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("profiles")
}

model Role {
  id          String @id @default(cuid())
  name        String @unique
  description String?
  users       User[]
  menus       RoleMenu[]

  @@map("roles")
}

model Menu {
  id        String     @id @default(cuid())
  name      String     @unique
  url       String
  icon      String?
  order     Int?
  parentId  String?
  parent    Menu?    @relation("SubMenu", fields: [parentId], references: [id])
  children  Menu[]   @relation("SubMenu")
  roles     RoleMenu[]

  @@map("menus")
}

model RoleMenu {
  roleId String
  menuId String
  role   Role   @relation(fields: [roleId], references: [id])
  menu   Menu   @relation(fields: [menuId], references: [id])

  @@id([roleId, menuId])
  @@map("role_menus")
}

model Customer {
  id          String   @id @default(cuid())
  name        String
  description String?
  address     String?
  phoneNumber String
  email       String?  @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  purchaseOrders PurchaseOrder[]

  @@map("customers")
}

model Supplier {
  id          String   @id @default(cuid())
  name        String
  code        String?  @unique
  description String?
  address     String?
  phoneNumber String
  email       String?  @unique
  bank        Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  purchaseOrders PurchaseOrder[]

  @@map("suppliers")
}

enum POType {
  SINGLE
  BULK
}

model PurchaseOrder {
  id                 String   @id @default(cuid())
  po_number          String
  suratJalan         String?
  invoicePengiriman  String?
  suratPO            String?
  suratPenagihan     String?
  customerId         String
  customer           Customer @relation(fields: [customerId], references: [id])
  supplierId         String?
  supplier           Supplier?  @relation(fields: [supplierId], references: [id])
  total_items        Int?
  tanggal_order      DateTime?
  po_type            POType   @default(SINGLE)
  statusId           String?
  status             Status?   @relation(fields: [statusId], references: [id])
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  files              FileUploaded[]
  purchaseOrderDetails PurchaseOrderDetail[]

  @@map("purchase_orders")
}

model FileUploaded {
  id              String        @id @default(cuid())
  filename        String
  path            String
  mimetype        String
  size            Int
  purchaseOrderId String?
  purchaseOrder   PurchaseOrder? @relation(fields: [purchaseOrderId], references: [id], onDelete: Cascade)
  statusId        String?
  status          Status?       @relation(fields: [statusId], references: [id])
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@map("file_uploaded")
}

model Status {
  id                 String          @id @default(cuid())
  status_code        String          @unique
  status_name        String
  status_description String?
  purchaseOrders     PurchaseOrder[]
  fileUploads        FileUploaded[]
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt

  @@map("statuses")
}

model Inventory {
  id           String   @id @default(cuid())
  kode_barang  String   @unique
  nama_barang  String
  stok_barang  Int
  min_stok     Int      @default(10)
  harga_barang Float
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  notifications Notification[]
  purchaseOrderDetails PurchaseOrderDetail[]

  @@map("inventories")
}

model Notification {
  id          String         @id @default(cuid())
  title       String
  message     String
  type        NotificationType @default(GENERAL)
  isRead      Boolean        @default(false)
  inventoryId String?
  inventory   Inventory?      @relation(fields: [inventoryId], references: [id])
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  @@map("notifications")
}

enum NotificationType {
  GENERAL
  LOW_STOCK
  OUT_OF_STOCK
  STOCK_ALERT
  SYSTEM
}

model PurchaseOrderDetail {
  id                      String        @id @default(cuid())
  kode_barang             String
  nama_barang             String
  quantity                Int
  isi                     Int
  harga                   Float
  potongan_a              Float?
  harga_after_potongan_a  Float?
  harga_netto             Float
  total_pembelian         Float
  potongan_b              Float?
  harga_after_potongan_b  Float?
  purchaseOrderId         String
  purchaseOrder           PurchaseOrder @relation(fields: [purchaseOrderId], references: [id], onDelete: Cascade)
  inventoryId             String
  inventory               Inventory     @relation(fields: [inventoryId], references: [id])
  createdAt               DateTime      @default(now())
  updatedAt               DateTime      @updatedAt

  @@map("purchase_order_details")
}
